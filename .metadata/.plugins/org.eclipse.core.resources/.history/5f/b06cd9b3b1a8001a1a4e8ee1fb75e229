	/*
 * 
 */
package WebDevProjectMM.diagram.navigator;

/**
 * @generated
 */
public class WebDevProjectMMNavigatorLabelProvider extends org.eclipse.jface.viewers.LabelProvider implements org.eclipse.ui.navigator.ICommonLabelProvider, org.eclipse.jface.viewers.ITreePathLabelProvider {

		/**
 * @generated
 */
static {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?UnknownElement", org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor());  //$NON-NLS-1$
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?ImageNotFound", org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor());  //$NON-NLS-1$
}
	
		/**
 * @generated
 */
public void updateLabel(org.eclipse.jface.viewers.ViewerLabel label, org.eclipse.jface.viewers.TreePath elementPath) {
	Object element = elementPath.getLastSegment();
	if (element instanceof WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorItem && !isOwnView(((WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorItem) element).getView())) {
		return;
	}
	label.setText(getText(element));
	label.setImage(getImage(element));
}
	
		/**
 * @generated
 */
public org.eclipse.swt.graphics.Image getImage(Object element) {
	if (element instanceof WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorGroup) {
	WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorGroup group = (WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorGroup) element;
	return WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().getBundledImage(group.getIcon());
}

	if (element instanceof WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorItem) {
	WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorItem navigatorItem = (WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorItem) element;
	if (!isOwnView(navigatorItem.getView())) {
		return super.getImage(element);
	}
	return getImage(navigatorItem.getView());
}

	// Due to plugin.xml content will be called only for "own" views
if (element instanceof org.eclipse.core.runtime.IAdaptable) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) ((org.eclipse.core.runtime.IAdaptable) element).getAdapter(org.eclipse.gmf.runtime.notation.View.class);
	if (view != null && isOwnView(view)) {
		return getImage(view);
	}
}

		return super.getImage(element);
}
	
		/**
 * @generated
 */
public org.eclipse.swt.graphics.Image getImage(org.eclipse.gmf.runtime.notation.View view) {
		switch (WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getVisualID(view)) {
		case WebDevProjectMM.diagram.edit.parts.WebSiteEditPart.VISUAL_ID:
	return getImage("Navigator?Diagram?https://www.WebDevProjectMM.com?WebSite", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.WebSite_1000); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.CreationCRUDEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?https://www.WebDevProjectMM.com?CreationCRUD", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.CreationCRUD_2001); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.DelitionCRUDEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?https://www.WebDevProjectMM.com?DelitionCRUD", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.DelitionCRUD_2002); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.AllCRUDEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?https://www.WebDevProjectMM.com?AllCRUD", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.AllCRUD_2003); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.IndexCRUDEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?https://www.WebDevProjectMM.com?IndexCRUD", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.IndexCRUD_2004); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.DetailCRUDEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?https://www.WebDevProjectMM.com?DetailCRUD", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.DetailCRUD_2005); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.RegularContentPageEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?https://www.WebDevProjectMM.com?RegularContentPage", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.RegularContentPage_2006); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.FormEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?https://www.WebDevProjectMM.com?Form", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.Form_2007); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.RoleEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?https://www.WebDevProjectMM.com?Role", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.Role_2008); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.TextEditPart.VISUAL_ID:
	return getImage("Navigator?Node?https://www.WebDevProjectMM.com?Text", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.Text_3001); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.MediaContentEditPart.VISUAL_ID:
	return getImage("Navigator?Node?https://www.WebDevProjectMM.com?MediaContent", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.MediaContent_3002); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.SocialNetworkContentEditPart.VISUAL_ID:
	return getImage("Navigator?Node?https://www.WebDevProjectMM.com?SocialNetworkContent", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.SocialNetworkContent_3003); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.StoredQuestionEditPart.VISUAL_ID:
	return getImage("Navigator?Node?https://www.WebDevProjectMM.com?StoredQuestion", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.StoredQuestion_3004); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.QuestionDefinitionEditPart.VISUAL_ID:
	return getImage("Navigator?Node?https://www.WebDevProjectMM.com?QuestionDefinition", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.QuestionDefinition_3005); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.PossibleAsnwerEditPart.VISUAL_ID:
	return getImage("Navigator?Node?https://www.WebDevProjectMM.com?PossibleAsnwer", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.PossibleAsnwer_3006); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.PageLinkEditPart.VISUAL_ID:
	return getImage("Navigator?Link?https://www.WebDevProjectMM.com?PageLink", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.PageLink_4001); //$NON-NLS-1$
case WebDevProjectMM.diagram.edit.parts.RoleWebpageEditPart.VISUAL_ID:
	return getImage("Navigator?Link?https://www.WebDevProjectMM.com?Role?webpage", WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.RoleWebpage_4002); //$NON-NLS-1$
	}
		return getImage("Navigator?UnknownElement", null);  //$NON-NLS-1$
}
	
		/**
 * @generated
 */
private org.eclipse.swt.graphics.Image getImage(String key, org.eclipse.gmf.runtime.emf.type.core.IElementType elementType) {
	org.eclipse.jface.resource.ImageRegistry imageRegistry = WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().getImageRegistry();
	org.eclipse.swt.graphics.Image image = imageRegistry.get(key);
	if (image == null && elementType != null && WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.isKnownElementType(elementType)) {
		image = WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.getImage(elementType);
		imageRegistry.put(key, image);
	}
			
	if (image == null) {
		image = imageRegistry.get("Navigator?ImageNotFound");  //$NON-NLS-1$
		imageRegistry.put(key, image);
	}
	return image;
}
	
		/**
 * @generated
 */
public String getText(Object element) {
	if (element instanceof WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorGroup) {
	WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorGroup group = (WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorGroup) element;
	return group.getGroupName();
}

	if (element instanceof WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorItem) {
	WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorItem navigatorItem = (WebDevProjectMM.diagram.navigator.WebDevProjectMMNavigatorItem) element;
   		if (!isOwnView(navigatorItem.getView())) {
   			return null;
   		}
   		return getText(navigatorItem.getView());
	}

	// Due to plugin.xml content will be called only for "own" views
if (element instanceof org.eclipse.core.runtime.IAdaptable) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) ((org.eclipse.core.runtime.IAdaptable) element).getAdapter(org.eclipse.gmf.runtime.notation.View.class);
	if (view != null && isOwnView(view)) {
		return getText(view);
	}
}

		return super.getText(element);
}
	
		/**
 * @generated
 */
public String getText(org.eclipse.gmf.runtime.notation.View view) {
	if (view.getElement() != null && view.getElement().eIsProxy()) {
		return getUnresolvedDomainElementProxyText(view);
	}
		switch (WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getVisualID(view)) {
		case WebDevProjectMM.diagram.edit.parts.WebSiteEditPart.VISUAL_ID:
	return getWebSite_1000Text(view);
case WebDevProjectMM.diagram.edit.parts.CreationCRUDEditPart.VISUAL_ID:
	return getCreationCRUD_2001Text(view);
case WebDevProjectMM.diagram.edit.parts.DelitionCRUDEditPart.VISUAL_ID:
	return getDelitionCRUD_2002Text(view);
case WebDevProjectMM.diagram.edit.parts.AllCRUDEditPart.VISUAL_ID:
	return getAllCRUD_2003Text(view);
case WebDevProjectMM.diagram.edit.parts.IndexCRUDEditPart.VISUAL_ID:
	return getIndexCRUD_2004Text(view);
case WebDevProjectMM.diagram.edit.parts.DetailCRUDEditPart.VISUAL_ID:
	return getDetailCRUD_2005Text(view);
case WebDevProjectMM.diagram.edit.parts.RegularContentPageEditPart.VISUAL_ID:
	return getRegularContentPage_2006Text(view);
case WebDevProjectMM.diagram.edit.parts.FormEditPart.VISUAL_ID:
	return getForm_2007Text(view);
case WebDevProjectMM.diagram.edit.parts.RoleEditPart.VISUAL_ID:
	return getRole_2008Text(view);
case WebDevProjectMM.diagram.edit.parts.TextEditPart.VISUAL_ID:
	return getText_3001Text(view);
case WebDevProjectMM.diagram.edit.parts.MediaContentEditPart.VISUAL_ID:
	return getMediaContent_3002Text(view);
case WebDevProjectMM.diagram.edit.parts.SocialNetworkContentEditPart.VISUAL_ID:
	return getSocialNetworkContent_3003Text(view);
case WebDevProjectMM.diagram.edit.parts.StoredQuestionEditPart.VISUAL_ID:
	return getStoredQuestion_3004Text(view);
case WebDevProjectMM.diagram.edit.parts.QuestionDefinitionEditPart.VISUAL_ID:
	return getQuestionDefinition_3005Text(view);
case WebDevProjectMM.diagram.edit.parts.PossibleAsnwerEditPart.VISUAL_ID:
	return getPossibleAsnwer_3006Text(view);
case WebDevProjectMM.diagram.edit.parts.PageLinkEditPart.VISUAL_ID:
	return getPageLink_4001Text(view);
case WebDevProjectMM.diagram.edit.parts.RoleWebpageEditPart.VISUAL_ID:
	return getRoleWebpage_4002Text(view);
	}
		return getUnknownElementText(view);
}
	
		/**
 * @generated
 */
private String getWebSite_1000Text(org.eclipse.gmf.runtime.notation.View view) {
			WebDevProjectMM.WebSite domainModelElement = (WebDevProjectMM.WebSite) view.getElement();
if (domainModelElement != null) {
	return domainModelElement.getName();
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 1000);  //$NON-NLS-1$
		return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getCreationCRUD_2001Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.CreationCRUD_2001, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.CreationCRUDNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5004); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getDelitionCRUD_2002Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.DelitionCRUD_2002, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.DelitionCRUDNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5005); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getAllCRUD_2003Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.AllCRUD_2003, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.AllCRUDNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5006); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getIndexCRUD_2004Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.IndexCRUD_2004, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.IndexCRUDNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5007); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getDetailCRUD_2005Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.DetailCRUD_2005, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.DetailCRUDNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5008); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getRegularContentPage_2006Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.RegularContentPage_2006, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.RegularContentPageNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5009); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getForm_2007Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.Form_2007, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.FormNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5013); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getRole_2008Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.Role_2008, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.RoleNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5014); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getText_3001Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.Text_3001, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.TextTextEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5001); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getMediaContent_3002Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.MediaContent_3002, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.MediaContentLinkEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5002); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getSocialNetworkContent_3003Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.SocialNetworkContent_3003, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.SocialNetworkContentParametersEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5003); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getStoredQuestion_3004Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.StoredQuestion_3004, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.StoredQuestionDescQuestionDefinitionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5010); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getQuestionDefinition_3005Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.QuestionDefinition_3005, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.QuestionDefinitionDescriptionEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5012); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getPossibleAsnwer_3006Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.PossibleAsnwer_3006, view.getElement() != null ? view.getElement() : view, WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getType(WebDevProjectMM.diagram.edit.parts.PossibleAsnwerAnswerTextEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5011); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getPageLink_4001Text(org.eclipse.gmf.runtime.notation.View view) {
								return "";  //$NON-NLS-1$
		}
	/**
 * @generated
 */
private String getRoleWebpage_4002Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = WebDevProjectMM.diagram.providers.WebDevProjectMMParserProvider.getParser(WebDevProjectMM.diagram.providers.WebDevProjectMMElementTypes.RoleWebpage_4002, view.getElement() != null ? view.getElement() : view, org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint.DESCRIPTION);
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	WebDevProjectMM.diagram.part.WebDevProjectMMDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6001); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	
		/**
 * @generated
 */
private String getUnknownElementText(org.eclipse.gmf.runtime.notation.View view) {
	return "<UnknownElement Visual_ID = " + view.getType() + ">";  //$NON-NLS-1$  //$NON-NLS-2$
}
	
		/**
 * @generated
 */
private String getUnresolvedDomainElementProxyText(org.eclipse.gmf.runtime.notation.View view) {
	return "<Unresolved domain element Visual_ID = " + view.getType() + ">";  //$NON-NLS-1$  //$NON-NLS-2$
}
	
		/**
 * @generated
 */
public void init(org.eclipse.ui.navigator.ICommonContentExtensionSite aConfig) {
}

		/**
 * @generated
 */
public void restoreState(org.eclipse.ui.IMemento aMemento) {
}

		/**
 * @generated
 */
public void saveState(org.eclipse.ui.IMemento aMemento) {
}
	
		/**
 * @generated
 */
public String getDescription(Object anElement) {
	return null;
}
	
		/**
 * @generated
 */
private boolean isOwnView(org.eclipse.gmf.runtime.notation.View view) {
	return WebDevProjectMM.diagram.edit.parts.WebSiteEditPart.MODEL_ID.equals(WebDevProjectMM.diagram.part.WebDevProjectMMVisualIDRegistry.getModelID(view));
}

	}
