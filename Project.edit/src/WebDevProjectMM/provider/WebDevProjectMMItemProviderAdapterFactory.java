/**
 */
package WebDevProjectMM.provider;

import WebDevProjectMM.util.WebDevProjectMMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WebDevProjectMMItemProviderAdapterFactory extends WebDevProjectMMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WebDevProjectMMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.WebSite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WebSiteItemProvider webSiteItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.WebSite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWebSiteAdapter() {
		if (webSiteItemProvider == null) {
			webSiteItemProvider = new WebSiteItemProvider(this);
		}

		return webSiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.SocialNetworkContent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SocialNetworkContentItemProvider socialNetworkContentItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.SocialNetworkContent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSocialNetworkContentAdapter() {
		if (socialNetworkContentItemProvider == null) {
			socialNetworkContentItemProvider = new SocialNetworkContentItemProvider(this);
		}

		return socialNetworkContentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.RegularContentPage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegularContentPageItemProvider regularContentPageItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.RegularContentPage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegularContentPageAdapter() {
		if (regularContentPageItemProvider == null) {
			regularContentPageItemProvider = new RegularContentPageItemProvider(this);
		}

		return regularContentPageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.Form} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormItemProvider formItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.Form}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FormItemProvider(this);
		}

		return formItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.StoredQuestion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoredQuestionItemProvider storedQuestionItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.StoredQuestion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoredQuestionAdapter() {
		if (storedQuestionItemProvider == null) {
			storedQuestionItemProvider = new StoredQuestionItemProvider(this);
		}

		return storedQuestionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.QuestionsRepo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionsRepoItemProvider questionsRepoItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.QuestionsRepo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionsRepoAdapter() {
		if (questionsRepoItemProvider == null) {
			questionsRepoItemProvider = new QuestionsRepoItemProvider(this);
		}

		return questionsRepoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.QuestionDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionDefinitionItemProvider questionDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.QuestionDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionDefinitionAdapter() {
		if (questionDefinitionItemProvider == null) {
			questionDefinitionItemProvider = new QuestionDefinitionItemProvider(this);
		}

		return questionDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.PossibleAsnwer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PossibleAsnwerItemProvider possibleAsnwerItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.PossibleAsnwer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPossibleAsnwerAdapter() {
		if (possibleAsnwerItemProvider == null) {
			possibleAsnwerItemProvider = new PossibleAsnwerItemProvider(this);
		}

		return possibleAsnwerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.Text} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemProvider textItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.Text}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.Database} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatabaseItemProvider databaseItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.Database}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatabaseAdapter() {
		if (databaseItemProvider == null) {
			databaseItemProvider = new DatabaseItemProvider(this);
		}

		return databaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.PageLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageLinkItemProvider pageLinkItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.PageLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageLinkAdapter() {
		if (pageLinkItemProvider == null) {
			pageLinkItemProvider = new PageLinkItemProvider(this);
		}

		return pageLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.MediaContent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MediaContentItemProvider mediaContentItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.MediaContent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMediaContentAdapter() {
		if (mediaContentItemProvider == null) {
			mediaContentItemProvider = new MediaContentItemProvider(this);
		}

		return mediaContentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.CreationCRUD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreationCRUDItemProvider creationCRUDItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.CreationCRUD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreationCRUDAdapter() {
		if (creationCRUDItemProvider == null) {
			creationCRUDItemProvider = new CreationCRUDItemProvider(this);
		}

		return creationCRUDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.DelitionCRUD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelitionCRUDItemProvider delitionCRUDItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.DelitionCRUD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelitionCRUDAdapter() {
		if (delitionCRUDItemProvider == null) {
			delitionCRUDItemProvider = new DelitionCRUDItemProvider(this);
		}

		return delitionCRUDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.AllCRUD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AllCRUDItemProvider allCRUDItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.AllCRUD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAllCRUDAdapter() {
		if (allCRUDItemProvider == null) {
			allCRUDItemProvider = new AllCRUDItemProvider(this);
		}

		return allCRUDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.IndexCRUD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexCRUDItemProvider indexCRUDItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.IndexCRUD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexCRUDAdapter() {
		if (indexCRUDItemProvider == null) {
			indexCRUDItemProvider = new IndexCRUDItemProvider(this);
		}

		return indexCRUDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link WebDevProjectMM.DetailCRUD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DetailCRUDItemProvider detailCRUDItemProvider;

	/**
	 * This creates an adapter for a {@link WebDevProjectMM.DetailCRUD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDetailCRUDAdapter() {
		if (detailCRUDItemProvider == null) {
			detailCRUDItemProvider = new DetailCRUDItemProvider(this);
		}

		return detailCRUDItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (webSiteItemProvider != null) webSiteItemProvider.dispose();
		if (socialNetworkContentItemProvider != null) socialNetworkContentItemProvider.dispose();
		if (regularContentPageItemProvider != null) regularContentPageItemProvider.dispose();
		if (formItemProvider != null) formItemProvider.dispose();
		if (storedQuestionItemProvider != null) storedQuestionItemProvider.dispose();
		if (questionsRepoItemProvider != null) questionsRepoItemProvider.dispose();
		if (questionDefinitionItemProvider != null) questionDefinitionItemProvider.dispose();
		if (possibleAsnwerItemProvider != null) possibleAsnwerItemProvider.dispose();
		if (textItemProvider != null) textItemProvider.dispose();
		if (databaseItemProvider != null) databaseItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (pageLinkItemProvider != null) pageLinkItemProvider.dispose();
		if (mediaContentItemProvider != null) mediaContentItemProvider.dispose();
		if (creationCRUDItemProvider != null) creationCRUDItemProvider.dispose();
		if (delitionCRUDItemProvider != null) delitionCRUDItemProvider.dispose();
		if (allCRUDItemProvider != null) allCRUDItemProvider.dispose();
		if (indexCRUDItemProvider != null) indexCRUDItemProvider.dispose();
		if (detailCRUDItemProvider != null) detailCRUDItemProvider.dispose();
	}

}
